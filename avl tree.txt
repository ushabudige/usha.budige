#AVL
class TreeNode(object):
    def __init__(self,_val):
        self.val = _val
        self.left = None
        self.right = None
        self.height = 1

class AVL_Tree(object):
    def insert(self, root, val):

#Simple Bst Insertion:
        if not root:
            return TreeNode(val)
        elif val < root.val:
            root.left = self.insert(root.left, val)
        else:
            root.right = self.insert(root.right, val)
            root.height = 1 + max(self.Height(root.left), self.Height(root.right))
            balance = self.check_Avl(root)

#RR Rotation as tree is Left Skewed
        if balance > 1 and val < root.left.val:
            return self.RR(root)

#LL Rotation as tree is Right Skewed
        if balance < -1 and val > root.right.val:
            return self.LL(root)
#RL Rotation as tree is Left then Right Skewed 
        if balance > 1 and val > root.left.val:
            root.left = self.LL(root.left)
            return self.RR(root)
#LR Rotation as tree is Right then Left Skewed 
        if balance < -1 and val < root.right.val:
            root.right = self.RR(root.right)
            return self.LL(root)
        return root

#LL Rotation
def LL(self, node):
    p = node.right
    t = p.left
#Rotations:
    p.left = node
    node.right = t
#modify the heights:
    node.height = 1 + max(self.Height(node.left), self.Height(node.right))
    p.height = 1 + max(self.Height(p.left), self.Height(p.right))
    return p

#LL Rotation
def RR(self, node):
    p = node.left
    t = p.right
#Rotations:
    p.right = node
    node.left = t
#modify the heights:
    node.height = 1 + max(self.Height(node.left), self.Height(node.right))
    p.height = 1 + max(self.Height(p.left), self.Height(p.right))
    return p
#Getting the Height
def Height(self, root):
    if not root:
        return 0
    return root.height
#Getting the Balancing Factor
def check_Avl(self, root):
    if not root:
        return 0

    return self.Height(root.left) - self.Height(root.right)

def preOrder(self, root):
    if not root:
        return 

    print("{0} ".format(root.val), end="")
    self.preOrder(root.left)
    self.preOrder(root.right)
       def delete(self, root, key):
        if not root:
            return root
        elif key < root.val:
            root.left = self.delete(root.left, key)
        elif key > root.val:
            root.right = self.delete(root.right, key)
        else:
            if root.left is None:
                temp = root.right
                root = None
                return temp
            elif root.right is None:
                temp = root.left
                root = None
                return temp
            temp = self.get_min_val_node(root.right)
            root.val = temp.val
            root.right = self.delete(root.right, temp.val)

        #If the tree has a single node return node
        if root is None:
            return root
        #update the height of the tree
        root.height = 1 + max(self.get_height(root.left),
                                self.get_height(root.right))
        #find the balance factor
        balance = self.get_balance(root)
        #Left Left
        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.right_rotate(root)
        #Right Right
        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.left_rotate(root)
        #Left Right
        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        #Right Left
        if balance < -1 and self.get_balance(root.right) < 0:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        return root
    


def insert_data(_data):
    mytree = AVL_Tree()
    root = None
    for i in _data:
        root = mytree.insert(root,i)
        print("Preorder Traversal of constructed AVL tree is:")
        mytree.preOrder(root)
        print()

    if __name__ == "__main__":
        insert_data([10,8,15,7,9,12,17,16,18,6,4])
    else:
        Pass


